import AbstractSeeder from "./AbstractSeeder";
import UserSeeder from "./UserSeeder";

class PostSeeder extends AbstractSeeder {
  constructor() {
    super({ table: "posts", truncate: true });
  }

  dependencies = [UserSeeder];

  run() {
    const funnyPosts = [
      {
        title: "Pourquoi mon code marche ?",
        content:
          "Aujourd'hui, j'ai pass√© 2h √† d√©bugger un bug qui a disparu quand j'ai ajout√© un console.log. Je pense s√©rieusement que mon code a une conscience. Est-ce que quelqu'un a d√©j√† eu ce bug quantique ? üòÇ",
        code_snippet: `function debug() {
  return "√áa marche, mais on ne sait pas pourquoi...";
}`,
        user_id: this.getRef("user_1").insertId,
      },
      {
        title: "La v√©rit√© sur les frameworks JS",
        content:
          "Moi quand on me demande quel framework utiliser en 2024. Plot twist : la r√©ponse change toutes les semaines ! ü§Ø",
        code_snippet: `const frameworks = ['React', 'Vue', 'Angular', 'Svelte', 'Solid'];
const choice = frameworks[Math.floor(Math.random() * frameworks.length)];
return \`Cette semaine, c'est \${choice} qui est √† la mode !\`;`,
        user_id: this.getRef("user_2").insertId,
      },
      {
        title: "Mes erreurs pr√©f√©r√©es",
        content:
          "Collection personnelle d'erreurs que j'ai rencontr√©es cette semaine. Attention, √¢mes sensibles s'abstenir ! üôà",
        code_snippet: `// Classics never die
undefined is not a function
Cannot read property 'map' of undefined
Unexpected token '}' in JSON at position 42
ReferenceError: $ is not defined
Maximum call stack size exceeded`,
        user_id: this.getRef("user_3").insertId,
      },
      {
        title: "CSS : mes r√®gles perso",
        content:
          "Mes techniques secr√®tes pour survivre en CSS. Spoiler : √ßa implique beaucoup de !important üòÖ",
        code_snippet: `margin: 0 auto;
display: flex;
justify-content: center;
align-items: center;
position: absolute !important;
z-index: 9999 !important;`,
        user_id: this.getRef("user_1").insertId,
      },
      {
        title: "D√©bugger un vendredi soir",
        content:
          "Moi √† 23h59 un vendredi en train de debug un truc qui marchait tr√®s bien √† 17h... Quelqu'un peut m'expliquer ? ü§î",
        code_snippet: `function whyDoesntThisWork() {
  return 42;
}

function itWorkedBefore() {
  return whyDoesntThisWork() * 2;
}`,
        user_id: this.getRef("user_2").insertId,
      },
      {
        title: "Mon workflow Git",
        content:
          "Entre nous, voici mon vrai workflow Git quotidien. Pas tr√®s orthodox mais √ßa marche ! üòé",
        code_snippet: `git add .
git commit -m "fix"
git push
git add .
git commit -m "fix fix"
git push
git add .
git commit -m "actually works now"
git push`,
        user_id: this.getRef("user_3").insertId,
      },
      {
        title: "Tests unitaires vs r√©alit√©",
        content:
          "Mes tests passent tous, mais mon application crash d√®s qu'un utilisateur la regarde. Normal ? ü§∑‚Äç‚ôÇÔ∏è",
        code_snippet: `describe('Mon super code', () => {
  it('should work', () => {
    expect(true).toBe(true);
  });
  
  it('should handle all edge cases', () => {
    expect('user input').not.toBe('user input');
  });
});`,
        user_id: this.getRef("user_1").insertId,
      },
      {
        title: "Stack Overflow, mon meilleur ami",
        content:
          "Je pense que 90% de mon code vient de Stack Overflow. Est-ce que √ßa fait de moi un mauvais d√©veloppeur ? ü§≠",
        code_snippet: `// Copied from Stack Overflow
// Link: https://stackoverflow.com/questions/...
// I have no idea how this works but it does
function magicFunction(data) {
  return data.reduce((acc, curr) => ({
    ...acc,
    [curr.id]: curr
  }), {});
}`,
        user_id: this.getRef("user_2").insertId,
      },
      {
        title: "La documentation que personne ne lit",
        content:
          "J'ai pass√© 3 jours √† √©crire une super documentation. R√©sultat : 0 vue, mais 47 questions sur le channel Slack... üìö",
        code_snippet: `/**
 * Cette fonction fait quelque chose de tr√®s important
 * @param {any} data - Les donn√©es (voir la doc)
 * @returns {any} - Le r√©sultat (voir la doc)
 * 
 * Exemples d'usage :
 * - Cas 1 : voir la doc
 * - Cas 2 : voir la doc
 * - Cas 3 : voir la doc
 */
function importantFunction(data) {
  return data;
}`,
        user_id: this.getRef("user_3").insertId,
      },
    ];

    for (const post of funnyPosts) {
      this.insert(post);
    }
  }
}

export default PostSeeder;
